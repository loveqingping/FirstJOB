!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BIN	Makefile	/^BIN=thread_pool$/;"	m
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-g -Wall$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS= -I .$/;"	m
LDFLAGS	Makefile	/^LDFLAGS=-lpthread$/;"	m
MAX_THREAD_NUM	thread_pool.h	5;"	d
OBJS	Makefile	/^OBJS=$(patsubst %.c,%.o,$(SRC))$/;"	m
PRING_BUFFER	ring_buffer.h	/^typedef RING_BUFFER* PRING_BUFFER;$/;"	t
RING_BUFFER	ring_buffer.h	/^}RING_BUFFER;$/;"	t	typeref:struct:__ring_buffer
SRC	Makefile	/^SRC=$(wildcard *.c)$/;"	m
THREAD_POOL_H	thread_pool.h	2;"	d
__RING_BUFFER__	ring_buffer.h	2;"	d
__ring_buffer	ring_buffer.h	/^typedef struct __ring_buffer$/;"	s
_task	thread_pool.h	/^typedef struct _task$/;"	s
_thread_pool	thread_pool.h	/^typedef struct _thread_pool$/;"	s
arg	thread_pool.h	/^	task_func_arg arg;$/;"	m	struct:_task
bsize	ring_buffer.h	/^	int bsize;	\/**< 保存环形队列中每个元素所占空间的大小。*\/$/;"	m	struct:__ring_buffer
cond	thread_pool.h	/^	pthread_cond_t cond;$/;"	m	struct:_thread_pool
cur_task_num	thread_pool.h	/^	uint32_t cur_task_num;$/;"	m	struct:_thread_pool
id	main.c	/^	int id;$/;"	m	struct:student	file:
main	main.c	/^int main(int argc, char* argv[])$/;"	f
max_task_num	thread_pool.h	/^	uint32_t max_task_num;                \/\/存放最大任务数量$/;"	m	struct:_thread_pool
mutex	thread_pool.h	/^	pthread_mutex_t mutex;$/;"	m	struct:_thread_pool
name	main.c	/^	char name[64];$/;"	m	struct:student	file:
rb_canRead	ring_buffer.h	88;"	d
rb_canWrite	ring_buffer.h	94;"	d
rb_create	ring_buffer.h	76;"	d
rb_dataBuffer	ring_buffer.h	99;"	d
rb_empty_slots	ring_buffer.h	132;"	d
rb_incPtr	ring_buffer.h	82;"	d
rb_initialize	ring_buffer.h	69;"	d
rb_memory_required	ring_buffer.h	63;"	d
rb_occupied_slots	ring_buffer.h	131;"	d
rb_readOut	ring_buffer.h	119;"	d
rb_readOutValue	ring_buffer.h	129;"	d
rb_readPeek	ring_buffer.h	109;"	d
rb_writeIn	ring_buffer.h	114;"	d
rb_writeInValue	ring_buffer.h	124;"	d
rb_writePeek	ring_buffer.h	104;"	d
rp	ring_buffer.h	/^	volatile int rp;	\/**< rp是读指针。 *\/$/;"	m	struct:__ring_buffer
rsize	ring_buffer.h	/^	int rsize;	\/**< 保存环形队列中元素的个数。在一个环形队列中能够保存元素的最大数量是rsize-1。*\/$/;"	m	struct:__ring_buffer
student	main.c	/^typedef struct student$/;"	s	file:
student	main.c	/^}student;$/;"	t	typeref:struct:student	file:
task	thread_pool.h	/^	task_t* task;$/;"	m	struct:_thread_pool
task_dequeue	thread_pool.c	/^static int task_dequeue(task_t* p_task)$/;"	f	file:
task_enqueue	thread_pool.c	/^static int task_enqueue(task_func_t user_task_func,task_func_arg user_arg)$/;"	f	file:
task_func	thread_pool.h	/^	task_func_t task_func;$/;"	m	struct:_task
task_func_arg	thread_pool.h	/^typedef void* task_func_arg;$/;"	t
task_func_t	thread_pool.h	/^typedef void* (*task_func_t)(void*);$/;"	t
task_t	thread_pool.h	/^}task_t;$/;"	t	typeref:struct:_task
test_func	main.c	/^void* test_func(void* arg)$/;"	f
thread	thread_pool.h	/^	pthread_t thread[MAX_THREAD_NUM];  \/\/用来存放线程ID;$/;"	m	struct:_thread_pool
thread_num	thread_pool.h	/^	uint32_t thread_num;$/;"	m	struct:_thread_pool
thread_pool	thread_pool.h	/^thread_pool_t thread_pool;$/;"	v
thread_pool_add_task	thread_pool.c	/^int thread_pool_add_task(task_func_t user_task_func,task_func_arg user_arg)$/;"	f
thread_pool_create	thread_pool.c	/^int thread_pool_create(int thread_num, int max_task_num)$/;"	f
thread_pool_destroy	thread_pool.c	/^int thread_pool_destroy()$/;"	f
thread_pool_exec	thread_pool.c	/^static void* thread_pool_exec(void* arg)    \/\/有点问题这里$/;"	f	file:
thread_pool_stop_all	thread_pool.c	/^int thread_pool_stop_all()$/;"	f
thread_pool_t	thread_pool.h	/^}thread_pool_t;$/;"	t	typeref:struct:_thread_pool
wp	ring_buffer.h	/^	volatile int wp;	\/**< wp是写指针。 *\/$/;"	m	struct:__ring_buffer
